"""
This class defines ALL events generated by the Azrael v1 contract.

Event List: Lent, Rented, Returned, LendingStopped, CollateralClaimed
"""

from abc import ABC
from dataclasses import asdict, dataclass
from typing import Any, List, Union

from transformers.azrael_v1.util import unpack_price


@dataclass
class AzraelEvent(ABC):
    """
    Abstract Azrael v1 Event. Holds txHash and txOffset, togther they are a unique
    identifier for azrael events. e.i _id=txHash_txOffset
    """

    _id: str
    event: str

    def to_dict(self):
        """Return a dict representation of this event"""
        return asdict(self)


@dataclass
class LentEvent(AzraelEvent):
    """
    LentEvent DTO

    Holds the event data for azrael v1 'Lent' event.
    """

    # pylint: disable=invalid-name,too-many-instance-attributes
    lendingId: int
    lentAmount: int
    maxRentDuration: int
    paymentToken: int
    nftAddress: str
    tokenId: str
    lendersAddress: str
    dailyRentPrice: float
    nftPrice: float
    isERC721: bool
    paymentToken: int

    #TODO: Typing for event parameters
    @classmethod
    def from_covalent(cls, event: Any, decoded_params: List[Any]):
        """
        Parses a covalent event into a 'Lent' Azrael v1 event.

        Args:
            event (Any): a covalent event
            decoded_params: (List[Any]): a list of decoded covalent event parameters. Order is important!

        Returns:
            _type_: instance of this class with the correct
            configs.
        """

        _id = f"{event['tx_hash']}_{event['log_offset']}"

        return cls(
            _id=_id,
            event='Lent',
            nftAddress=decoded_params[0],
            tokenId=decoded_params[1],
            lentAmount=int(decoded_params[2]), 
            lendingId=int(decoded_params[3]),
            lendersAddress=decoded_params[4],
            maxRentDuration=int(decoded_params[5]),
            dailyRentPrice=unpack_price(decoded_params[6]),
            nftPrice=unpack_price(decoded_params[7]),
            isERC721=decoded_params[8],
            paymentToken=int(decoded_params[9])
        )


@dataclass
class RentedEvent(AzraelEvent):
    """
    RentedEvent DTO

    Holds the event data for azrael v1 'Rented' event.
    """

    # pylint: disable=invalid-name
    lendingId: int
    renterAddress: str
    rentDuration: int
    rentedAt: int

    #TODO: Typing for event parameters  
    @classmethod
    def from_covalent(cls, event: Any, decoded_params: List[Any]):
        """
        Parses a covalent event into a 'Rented' Azrael v1 event.

        Args:
            event (Any): a covalent event
            decoded_params: (List[Any]): a list of decoded covalent event parameters. Order is important!

        Returns:
            _type_: instance of this class with the correct
            configs.
        """

        _id = f"{event['tx_hash']}_{event['log_offset']}"

        return cls(
            _id=_id,
            event='Rented',
            lendingId=int(decoded_params[0]),
            renterAddress=decoded_params[1],
            rentDuration=int(decoded_params[2]),
            rentedAt=int(decoded_params[3])
        )


@dataclass
class ReturnedEvent(AzraelEvent):
    """
    ReturnedEvent DTO

    Holds the event data for azrael v1 'Returned' event.
    """

    #pylint: disable=invalid-name
    lendingId: int
    returnedAt: int

    #TODO: Typing for event parameters
    @classmethod
    def from_covalent(cls, event: Any, decoded_params: List[Any]):
        """
        Parses a covalent event into a 'Returned' Azrael v1 event.

        Args:
            event (Any): a covalent event
            decoded_params: (List[Any]): a list of decoded covalent event parameters. Order is important!

        Returns:
            _type_: instance of this class with the correct
            configs.
        """

        _id = f"{event['tx_hash']}_{event['log_offset']}"

        return cls(
            _id=_id,
            event='Returned',
            lendingId=int(decoded_params[0]),
            returnedAt=int(decoded_params[1])
        )

@dataclass
class LendingStoppedEvent(AzraelEvent):
    """
    LendingStopped DTO

    Holds the event data for azrael v1 'LendingStopped' event.
    """

    #pylint: disable=invalid-name
    lendingId: int
    stoppedAt: int

    #TODO: Typing for event parameters
    @classmethod
    def from_covalent(cls, event: Any, decoded_params: List[Any]):
        """
        Parses a covalent event into a 'LendingStopped' Azrael v1 event.

        Args:
            event (Any): a covalent event
            decoded_params: (List[Any]): a list of decoded covalent event parameters. Order is important!

        Returns:
            _type_: instance of this class with the correct
            configs.
        """

        _id = f"{event['tx_hash']}_{event['log_offset']}"

        return cls(
            _id=_id,
            event='LendingStopped',
            lendingId=int(decoded_params[0]),
            stoppedAt=int(decoded_params[1])
        )

@dataclass
class CollateralClaimedEvent(AzraelEvent):
    """
    CollateralClaimed DTO

    Holds the event data for azrael v1 'CollateralClaimed' event.
    """

    #pylint: disable=invalid-name
    lendingId: int
    claimedAt: int

    #TODO: Typing for event parameters
    @classmethod
    def from_covalent(cls, event: Any, decoded_params: List[Any]):
        """
        Parses a covalent event into a 'CollateralClaimed' Azrael v1 event.

        Args:
            event (Any): a covalent event
            decoded_params: (List[Any]): a list of decoded covalent event parameters. Order is important!

        Returns:
            _type_: instance of this class with the correct
            configs.
        """

        _id = f"{event['tx_hash']}_{event['log_offset']}"

        return cls(
            _id=_id,
            event='CollateralClaimed',
            lendingId=int(decoded_params[0]),
            claimedAt=int(decoded_params[1])
        )
