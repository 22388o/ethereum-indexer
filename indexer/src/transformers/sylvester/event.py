"""
This class defines ALL events generated by the sylvester contract.

Event List: Lend, Rent, StopRent, StopLend, RentClaimed
"""

import re
from abc import ABC
from dataclasses import asdict, dataclass
from typing import Any, List, Union

from transformers.sylvester.util import unpack_price

ID_SEPERATOR='_'

@dataclass
class SylvesterEvent(ABC):
    """
    Abstract sylvester Event. Holds txHash and txOffset, togther they are a unique
    identifier for sylvester events. e.i _id=txHash_txOffset
    """

    _id: str
    event: str


    @staticmethod
    def get_id(tx_hash: str, tx_offset: Union[str, int]) -> str:
        """Creates unique identifier for Sylvester Event
        
        Args:
            tx_hash (str): transaction hash
            tx_offset (Union[str, int]): transaction offset

        Returns:
            id (str): Unique identifier composed of txHash and txOffset.
                e.i. 0xf79edc5500218427d22d4215799fb51064c633ca919c0406b830ed5dc3c6eb1a_100
        """
        return f"{tx_hash}{ID_SEPERATOR}{tx_offset}"

    def to_dict(self):
        """Return a dict representation of this event"""
        return asdict(self)


@dataclass
class LendEvent(SylvesterEvent):
    """
    LendEvent DTO (Data Transfer Object)

    Holds the event data for sylvester 'Lend' event.
    """

    # pylint: disable=invalid-name,too-many-instance-attributes
    is721: bool
    lenderAddress: str
    nftAddress: str
    tokenID: str
    lendingID: int
    maxRentDuration: int
    dailyRentPrice: float
    lendAmount: int
    paymentToken: int


   #TODO: Typing for event parameters
    @classmethod
    def from_covalent(cls, event: Any, decoded_params: List[Any]):
        """
        Parses a covalent event into a 'Lend' sylvester event.

        Args:
            event (Any): a covalent event
            decoded_params: (List[Any]): a list of decoded covalent event parameters. Order is important!

        Returns:
            _type_: instance of this class with the correct
            configs.
        """

        _id = SylvesterEvent.get_id(event['tx_hash'], event['log_offset'])

        return cls(
            _id=_id,
            event='Lend',
            is721=decoded_params[0],
            lenderAddress=decoded_params[1],
            nftAddress=decoded_params[2],
            tokenID=decoded_params[3],
            lendingID=int(decoded_params[4]),
            maxRentDuration=int(decoded_params[5]),
            dailyRentPrice=unpack_price(decoded_params[6]),
            lendAmount=int(decoded_params[7]),
            paymentToken=int(decoded_params[8]),
        )


@dataclass
class RentEvent(SylvesterEvent):
    """
    RentEvent DTO (Data Transfer Object)

    Holds the event data for sylvester 'Rent' event.
    """

    # pylint: disable=invalid-name
    lendingID: int
    renterAddress: str
    rentDuration: int
    rentAmount: int
    rentingID: int
    rentedAt: int

   #TODO: Typing for event parameters
    @classmethod
    def from_covalent(cls, event: Any, decoded_params: List[Any]):
        """
        Parses a covalent event into a 'Rent' sylvester event.

        Args:
            event (Any): a covalent event
            decoded_params: (List[Any]): a list of decoded covalent event parameters. Order is important!

        Returns:
            _type_: instance of this class with the correct
            configs.
        """

        _id = SylvesterEvent.get_id(event['tx_hash'], event['log_offset'])

        return cls(
            _id=_id,
            event='Rent',
            renterAddress=decoded_params[0],
            lendingID=int(decoded_params[1]),
            rentingID=int(decoded_params[2]),
            rentAmount=int(decoded_params[3]),
            rentDuration=int(decoded_params[4]),
            rentedAt=int(decoded_params[5])
        )


@dataclass
class StopRentEvent(SylvesterEvent):
    """
    StopRentEvent DTO (Data Transfer Object)

    Holds the event data for sylvester 'StopRent' event.
    """

    # pylint: disable=invalid-name
    rentingID: int
    stoppedAt: int

   #TODO: Typing for event parameters
    @classmethod
    def from_covalent(cls, event: Any, decoded_params: List[Any]):
        """
        Parses a covalent event into a 'StopRent' sylvester event.

        Args:
            event (Any): a covalent event
            decoded_params: (List[Any]): a list of decoded covalent event parameters. Order is important!

        Returns:
            _type_: instance of this class with the correct
            configs.
        """

        _id = SylvesterEvent.get_id(event['tx_hash'], event['log_offset'])

        return cls(
            _id=_id,
            event='StopRent',
            rentingID=int(decoded_params[0]),
            stoppedAt=int(decoded_params[1]),
        )


@dataclass
class StopLendEvent(SylvesterEvent):
    """
    StopLendEvent DTO (Data Transfer Object)

    Holds the event data for sylvester 'StopLend' event.
    """

    # pylint: disable=invalid-name
    lendingID: int
    stoppedAt: int

   #TODO: Typing for event parameters
    @classmethod
    def from_covalent(cls, event: Any, decoded_params: List[Any]):
        """
        Parses a covalent event into a 'StopLend' sylvester event.

        Args:
            event (Any): a covalent event
            decoded_params: (List[Any]): a list of decoded covalent event parameters. Order is important!

        Returns:
            _type_: instance of this class with the correct
            configs.
        """

        _id = SylvesterEvent.get_id(event['tx_hash'], event['log_offset'])

        return cls(
            _id=_id,
            event='StopLend',
            lendingID=int(decoded_params[0]),
            stoppedAt=int(decoded_params[1]),
        )


@dataclass
class RentClaimedEvent(SylvesterEvent):
    """
    RentClaimedEvent DTO (Data Transfer Object)

    Holds the event data for sylvester 'RentClaimed' event.
    """

    # pylint: disable=invalid-name
    rentingID: int
    collectedAt: int

   #TODO: Typing for event parameters
    @classmethod
    def from_covalent(cls, event: Any, decoded_params: List[Any]):
        """
        Parses a covalent event into a 'RentClaimed' sylvester event.

        Args:
            event (Any): a covalent event
            decoded_params: (List[Any]): a list of decoded covalent event parameters. Order is important!

        Returns:
            _type_: instance of this class with the correct
            configs.
        """

        _id = SylvesterEvent.get_id(event['tx_hash'], event['log_offset'])

        return cls(
            _id=_id,
            event='RentClaimed',
            rentingID=int(decoded_params[0]),
            collectedAt=int(decoded_params[1]),
        )
