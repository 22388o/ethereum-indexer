
from abc import ABC
from dataclasses import dataclass

"""
This class defines ALL events generated by the Azrael v1 contract.

Event List: Lent, Rented, Returned, LendingStopped, CollateralClaimed
"""

@dataclass
class Event(ABC):
    tx_hash: str
    tx_offset: int

    @staticmethod
    def parse_id(id):
        """
        Parses '_id' to tx_hash and tx_offset. 

        Args:
            id (str): mongodb '_id' e.i. 0xf79edc5500218427d22d4215799fb51064c633ca919c0406b830ed5dc3c6eb1a_100

        Returns: 
            str: tx_hash
            int: tx_offset
        """
        id = id.split('_')

        return id[0], int(id[1])


@dataclass
class LentEvent(Event):
    lendingId: int
    lentAmount: int
    maxRentDuration: int
    paymentToken: int
    nftAddress: str
    tokenId: str
    lendersAddress: str
    dailyRentPrice: float
    nftPrice: float
    isERC721: bool
    paymentToken: int

    @classmethod
    def from_doc(cls, doc):
        """
        Parses a mongodb document into a 'Lent' Azrael v1 event.

        Args:
            doc (Dict): a mongodb document

        Returns:
            _type_: instance of this class with the correct
            configs.
        """

        tx_hash, tx_offset = Event.parse_id(doc['_id'])

        return cls(
            tx_hash,
            tx_offset,
            lendingId=int(doc['lendingId']), 
            lentAmount=int(doc['lentAmount']), 
            maxRentDuration=int(doc['maxRentDuration']),
            paymentToken=int(doc['paymentToken']),
            nftAddress=doc['nftAddress'],
            tokenId=doc['tokenId'],
            lendersAddress=doc['lendersAddress'],
            dailyRentPrice=doc['dailyRentPrice'],
            nftPrice=doc['nftPrice'],
            isERC721=doc['isERC721'],
            )


@dataclass
class RentedEvent(Event):
    lendingId: int
    renterAddress: str
    rentDuration: int
    rentedAt: int

    @classmethod
    def from_doc(cls, doc):
        """
        Parses a mongodb document into a 'Rented' Azrael v1 event.

        Args:
            doc (Dict): a mongodb document

        Returns:
            _type_: instance of this class with the correct
            configs.
        """

        tx_hash, tx_offset = Event.parse_id(doc['_id'])

        return cls(
            tx_hash,
            tx_offset,
            lendingId=int(doc['lendingId']),
            renterAddress=doc['renterAddress'],
            rentDuration=int(doc['rentDuration']),
            rentedAt=int(doc['rentedAt'])
        )


@dataclass
class ReturnedEvent(Event):
    lendingId: int
    returnedAt: int

    @classmethod
    def from_doc(cls, doc):
        """
        Parses a mongodb document into a 'Returned' Azrael v1 event.

        Args:
            doc (Dict): a mongodb document

        Returns:
            _type_: instance of this class with the correct
            configs.
        """

        tx_hash, tx_offset = Event.parse_id(doc['_id'])

        return cls(
            tx_hash,
            tx_offset,
            lendingId=int(doc['lendingId']),
            returnedAt=int(doc['returnedAt'])
        )

@dataclass
class LendingStopped(Event):
    lendingId: int
    stoppedAt: int

    @classmethod
    def from_doc(cls, doc):
        """
        Parses a mongodb document into a 'LendingStopped' Azrael v1 event.

        Args:
            doc (Dict): a mongodb document

        Returns:
            _type_: instance of this class with the correct
            configs.
        """

        tx_hash, tx_offset = Event.parse_id(doc['_id'])

        return cls(
            tx_hash,
            tx_offset,
            lendingId=int(doc['lendingId']),
            stoppedAt=int(doc['stoppedAt'])
        )

@dataclass
class CollateralClaimed(Event):
    lendingId: int
    claimedAt: int

    @classmethod
    def from_doc(cls, doc):
        """
        Parses a mongodb document into a 'CollateralClaimed' Azrael v1 event.

        Args:
            doc (Dict): a mongodb document

        Returns:
            _type_: instance of this class with the correct
            configs.
        """

        tx_hash, tx_offset = Event.parse_id(doc['_id'])

        return cls(
            tx_hash,
            tx_offset,
            lendingId=int(doc['lendingId']),
            claimedAt=int(doc['claimedAt'])
        )


