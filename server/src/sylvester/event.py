
from abc import ABC
from dataclasses import dataclass

"""
This class defines ALL events generated by the Sylvester v1 contract.

Event List: Lend, Rent, StopRent, StopLend, RentClaimed
"""

@dataclass
class Event(ABC):
    tx_hash: str
    tx_offset: int

    @staticmethod
    def parse_id(id):
        """
        Parses '_id' to tx_hash and tx_offset. 

        Args:
            id (str): mongodb '_id' e.i. 0xf79edc5500218427d22d4215799fb51064c633ca919c0406b830ed5dc3c6eb1a_100

        Returns: 
            str: tx_hash
            int: tx_offset
        """
        id = id.split('_')

        return id[0], int(id[1])


@dataclass
class LendEvent(Event):
    is721: bool
    lenderAddress: str
    nftAddress: str
    tokenID: str
    lendingID: int
    maxRentDuration: int
    dailyRentPrice: float
    lendAmount: int
    paymentToken: int


    @classmethod
    def from_doc(cls, doc):
        """
        Parses a mongodb document into a 'Lend' Sylvester v1 event.

        Args:
            doc (Dict): a mongodb document

        Returns:
            _type_: instance of this class with the correct
            configs.
        """

        tx_hash, tx_offset = Event.parse_id(doc['_id'])

        return cls(
            tx_hash,
            tx_offset,
            lendingID=int(doc['lendingID']), 
            lenderAddress=doc['lenderAddress'],
            nftAddress=doc['nftAddress'],
            tokenID=doc['tokenID'],
            maxRentDuration=int(doc['maxRentDuration']),
            dailyRentPrice=doc['dailyRentPrice'],
            lendAmount=int(doc['lendAmount']),
            paymentToken=int(doc['paymentToken']),
            is721=doc['is721']
            )


@dataclass
class RentEvent(Event):
    lendingID: int
    renterAddress: str
    rentDuration: int
    rentAmount: int
    rentingID: int
    rentedAt: int

    @classmethod
    def from_doc(cls, doc):
        """
        Parses a mongodb document into a 'Rent' Sylvester v1 event.

        Args:
            doc (Dict): a mongodb document

        Returns:
            _type_: instance of this class with the correct
            configs.
        """

        tx_hash, tx_offset = Event.parse_id(doc['_id'])

        return cls(
            tx_hash,
            tx_offset,
            lendingID=int(doc['lendingID']),
            renterAddress=doc['renterAddress'],
            rentDuration=int(doc['rentDuration']),
            rentAmount=int(doc['rentAmount']),
            rentingID=int(doc['rentingID']),
            rentedAt=int(doc['rentedAt'])
        )


@dataclass
class StopRentEvent(Event):
    rentingID: int
    stoppedAt: int

    @classmethod
    def from_doc(cls, doc):
        """
        Parses a mongodb document into a 'StopRent' Sylvester v1 event.

        Args:
            doc (Dict): a mongodb document

        Returns:
            _type_: instance of this class with the correct
            configs.
        """

        tx_hash, tx_offset = Event.parse_id(doc['_id'])

        return cls(
            tx_hash,
            tx_offset,
            rentingID=int(doc['rentingID']),
            stoppedAt=int(doc['stoppedAt'])
        )

@dataclass
class StopLendEvent(Event):
    lendingID: int
    stoppedAt: int

    @classmethod
    def from_doc(cls, doc):
        """
        Parses a mongodb document into a 'StopLend' Sylvester v1 event.

        Args:
            doc (Dict): a mongodb document

        Returns:
            _type_: instance of this class with the correct
            configs.
        """

        tx_hash, tx_offset = Event.parse_id(doc['_id'])

        return cls(
            tx_hash,
            tx_offset,
            lendingID=int(doc['lendingID']),
            stoppedAt=int(doc['stoppedAt'])
        )

@dataclass
class RentClaimedEvent(Event):
    rentingID: int
    collectedAt: int

    @classmethod
    def from_doc(cls, doc):
        """
        Parses a mongodb document into a 'RentClaimed' Sylvester v1 event.

        Args:
            doc (Dict): a mongodb document

        Returns:
            _type_: instance of this class with the correct
            configs.
        """

        tx_hash, tx_offset = Event.parse_id(doc['_id'])

        return cls(
            tx_hash,
            tx_offset,
            rentingID=int(doc['rentingID']),
            collectedAt=int(doc['collectedAt'])
        )


